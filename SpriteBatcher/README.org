#+title: SpriteBatcher
#+author: minh-p (Vu Huy Minh Pham)

Tutorial following [[https://moonside.games/posts/sdl-gpu-sprite-batcher/][Moonside Games' Tutorial]]
* Usage
** Building
Use nix or cmake. Make sure SDL3 is installed on your system.
#+BEGIN_SRC sh
nix-build
#+END_SRC
** Running
#+BEGIN_SRC sh
cd ./result/bin
./SpriteBatcher
#+END_SRC
* Conceptual Brief
While doing [[../Triangle][Triangle]], I've only developed a surface understanding of how vertex buffer and its interaction with the shaders. In order to finish the SpriteBatcher tutorial, I have to use what I learned from my first project to make a sprite batcher. I'm gonna quote important understanding about the vertex buffers and shaders from the tutorial:

#+BEGIN_QUOTE
A draw call specifies a vertex count. Vertices are taken from a vertex buffer and transformed in parallel by a vertex shader. The resulting triangles from the vertex shader are rasterized (meaning that pixels contained inside the shape are identified). The resulting pixels (or fragments) from the rasterization are then colored in parallel by a fragment shader. Finally, these colors are written to the render target with the selected blend mode.

\mdash [[https://moonside.games/posts/sdl-gpu-sprite-batcher/#encoding-information][Tutorial, Encoding Information]]
#+END_QUOTE

After knowing the fundamentals, the tutorial says that GPU pipelining becomes more efficient when it is our goal to eliminate state changes. The pipeline would be simply pulling data out of a bound buffer. The [[../Triangle/src/main.cpp][sprite batching method]] I did with the first tutorial is labeled as the old-fashioned way, where I simply build a vertex buffer in CPU code (then later initiate a copy pass). Now, I want to get "an enormous performance boost from leveraging the massively parallel capabilities of the GPU".

#+BEGIN_SRC cpp
Vertex *data =
    (Vertex *)SDL_MapGPUTransferBuffer(device, transferBuffer, false);

// Copying every vertex to data. e.g. data[0] = vertices[0]; data[1] =
// vertices[1]...
SDL_memcpy(data, vertices, sizeof(vertices));

// Unmapping as we're donig updating the transfer buffer
SDL_UnmapGPUTransferBuffer(device, transferBuffer);
#+END_SRC

The new idea is not to rely on the vertex buffer bound:

#+BEGIN_QUOTE
If there is no vertex buffer input, the vertex shader function can take in an ID and we can build outputs using that ID.

\mdash [[https://moonside.games/posts/sdl-gpu-sprite-batcher/#the-vertex-shader][Tutorial, The Vertex Shader]]
#+END_QUOTE
* Things to Learn
I have already explored the basic setup of the SDL library. The difficult thing about this tutorial is learning the shader language and understanding it. Right now, the tutorial is written in GLSL. I don't want to touch SDL_shadercross. Therefore, I am going to write the shaders in [[https://learnopengl.com/Getting-started/Shaders][GLSL]].
** std140 GLSL Padding
std140 states the base alignment of each structure's member is 16 bytes.

vec3 Position - 16 bytes (actually size 12 but auto padded to 16 bytes). 0-15
float Rotation - 4 bytes. 15-19
vec2 Scale - 8 bytes. 19-27
vec2 TexU, TexV, TexW, TexH - 4 * 4 = 16 bytes. 27-43.
vec4 Color - 16 bytes 43-59

Last offset is 59. The stride is 60 bytes, which is not a multiple of 16. Therefore, a padding of vec2 is needed (+4 bytes). The stride is then 64 bytes which is a multiple of 16.

#+BEGIN_SRC glsl
// Must Follow GLSL std140
layout(std140, binding = 0) buffer SpriteBuffer {
    struct SpriteData {
        vec3 Position;
        float Rotation;
        vec2 Scale;
        // The padding needed for std140. Must align to 16 bytes.
        vec2 Padding;
        float TexU, TexV, TexW, TexH;
        vec4 Color;
    };
    // Compared to a uniform buffer, we don't have to specify instance count.
    // The equivalent of a StructuredBuffer (HLSL) in GLSL is Shader Storage Buffer Object.
    // https://www.khronos.org/opengl/wiki/Shader_Storage_Buffer_Object.
    // There can only be on array of variable size.
    // It has to be the bottommost variable.
    SpriteData DataBuffer[];
}
#+END_SRC
*** std 140 Base Alignment
- Scalars (bool, int, uint, float): 4 bytes.
- 2 Components Vectors (vec2, ivec2, uvec2, bvec2): 8 bytes.
- 3 Component Vectors (vec3, ivec3, uvec3, bvec3): 16 bytes (12 bytes in size but [auto] padded to 16 bytes).
- 4 Component Vectors (vec4, ivec4, uvec4, bvec4): 16 bytes.
- matCxR (C columns, R rows). Each row/column vector has a base alignment of 16 bytes.
  - Column-major: Treated like an array of C vecR. Same as base alignment of its column vector.
  - Row-major: Treated like an array of R vecC. Same as base alignment of its row vector.
- Structures: the largest base alignment of any of its members, rounded up to the size of a vec4 (16 bytes).
